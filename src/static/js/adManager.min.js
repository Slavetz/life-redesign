(window.googletag = window.googletag || {}),
  (window.googletag.cmd = window.googletag.cmd || []),
  window.googletag.cmd.push(() => {
    window.googletag.pubads().collapseEmptyDivs(!0),
      window.googletag.pubads().enableSingleRequest(),
      window.googletag.pubads().disableInitialLoad(),
      window.googletag.enableServices();
  }),
  (window.pbjs = window.pbjs || {}),
  (window.pbjs.que = window.pbjs.que || []),
  (window.priceGranularity = {
    buckets: [
      { min: 0, max: 900, increment: 1 },
      { min: 902, max: 3600, increment: 2 },
      { min: 3605, max: 5850, increment: 5 },
    ],
  }),
  (() => {
    class e {
      constructor(e, s) {
        (this.props = e), (this.id = `${this.props.selector}-${s}`);
      }

      _init() {
        const { slot: e, slotSizes: s, targets: t, bid: o, bidSizes: i } = this.props;
        if (o && !document.getElementById('prebid-script')) {
          const e = document;
          const s = e.createElement('script');
          (s.async = !0), (s.id = 'prebid-script'), (s.src = '/static/js/prebid.3.15.0.min.js');
          const t = e.getElementsByTagName('script')[0];
          t.parentNode.insertBefore(s, t);
        }
        const { googletag: d } = window;
        d.cmd.push(() => {
          const { id: r } = this;
          const n = d.defineSlot(e, s, r).addService(d.pubads());
          if (
            ((this.ad = n),
            d.display(r),
            t &&
              Array.isArray(t) &&
              t.length > 0 &&
              t.forEach(({ name: e, value: s }) => {
                n.setTargeting(e, s);
              }),
            !o)
          )
            return void d.pubads().refresh([n]);
          const { pbjs: a, priceGranularity: c } = window;
          a.que.push(() => {
            const e = { code: r, mediaTypes: { banner: { sizes: i } }, bids: [o] };
            a.addAdUnits(e),
              a.setConfig({ priceGranularity: c }),
              a.requestBids({
                adUnitCodes: [r],
                bidsBackHandler() {
                  a.setTargetingForGPTAsync([r]), d.pubads().refresh([n]);
                },
              });
          });
        });
      }

      refreshAd() {
        const { googletag: e } = window;
        const {
          ad: s,
          id: t,
          props: { bid: o },
        } = this;
        try {
          e.cmd.push(() => {
            e.display(t);
          }),
            o ? this._refreshBid(s, t) : this._refreshSlot(s);
        } catch (e) {
          console.error('refreshAd Err', e);
        }
      }

      _refreshSlot(e) {
        const { googletag: s } = window;
        s.cmd.push(() => {
          s.pubads().refresh([e]);
        });
      }

      _refreshBid(e, s) {
        const { googletag: t, pbjs: o } = window;
        o.que.push(() => {
          o.requestBids({
            adUnitCodes: [s],
            bidsBackHandler() {
              o.setTargetingForGPTAsync([s]), t.pubads().refresh([e]);
            },
          });
        });
      }
    }
    window.adManager = new (class {
      constructor() {
        (this.counter = 0), (this.adSlots = []);
      }

      createSlot(s) {
        const t = new e(s, this.counter);
        return t && this.adSlots.push(t), (this.counter += 1), t;
      }

      removeSlotById(e) {
        const s = this.adSlots.length;
        (this.adSlots = this.adSlots.filter((s) => s.id !== e)),
          this.adSlots.length === s && console.error('id of removing ad is not founded');
      }

      getSlotById(e) {
        return this.adSlots.find((s) => s.id === e);
      }
    })();
  })();
