function cacheFonts(o, t) {
  if (!window.FontFace || !o || o.length === 0) return;
  const e = o
    .map((o) => {
      const t = { display: 'swap', style: 'normal' };
      let e;
      return (
        o.indexOf('roboto') > -1 ? (e = 'Roboto') : o.indexOf('life') > -1 && (e = 'Life'),
        o.indexOf('roboto-regular') > -1
          ? (t.weight = 'normal')
          : o.indexOf('roboto-medium') > -1
          ? (t.weight = '500')
          : o.indexOf('roboto-bold') > -1
          ? (t.weight = '700')
          : o.indexOf('roboto-black') > -1
          ? (t.weight = '900')
          : o.indexOf('life-bold') > -1 && (t.weight = '700'),
        { name: e, options: t, url: `url(/${o})` }
      );
    })
    .map((o) => new window.FontFace(o.name, o.url, o.options));
  if (window.__fontsCached)
    e.forEach((o) => {
      document.fonts.add(o);
    });
  else {
    const n = e.map(async (o) => {
      try {
        return document.fonts.add(await o.load()), o.loaded;
      } catch (o) {
        console.error(o);
      }
    });
    Promise.all(n).then(
      () => {
        window.localStorage.setItem(t, JSON.stringify(o));
      },
      (o) => {
        console.error('failed loading fonts', o);
      }
    );
  }
}
function isFontsCached(o, t) {
  const e =
    (function () {
      const o = 'test';
      try {
        return localStorage.setItem(o, o), localStorage.removeItem(o), !0;
      } catch (o) {
        return !1;
      }
    })() && JSON.parse(localStorage.getItem(t));
  let n = !1;
  o && o.length > 0 && e && e.length > 0
    ? (o.length !== e.length
        ? (n = !0)
        : o.forEach((o) => {
            e.indexOf(o) === -1 && (n = !0);
          }),
      n && localStorage.removeItem(t))
    : (n = !0),
    (window.__fontsCached = !n);
}
const fonts = [
  'fonts/roboto-black-webfont.woff',
  'fonts/roboto-bold-webfont.woff',
  'fonts/roboto-medium-webfont.woff',
  'fonts/roboto-regular-webfont.woff',
  'fonts/space_mono_life-bold-webfont.woff',
];
isFontsCached(fonts, '__fontsCached'), cacheFonts(fonts, '__fontsCached');
